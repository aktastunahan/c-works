PTHREAD_CREATE(3)                             Linux Programmer's Manual                             PTHREAD_CREATE(3)

NNAAMMEE
       pthread_create - create a new thread

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<pptthhrreeaadd..hh>>

       iinntt pptthhrreeaadd__ccrreeaattee((pptthhrreeaadd__tt **_t_h_r_e_a_d,, ccoonnsstt pptthhrreeaadd__aattttrr__tt **_a_t_t_r,,
                          vvooiidd **((**_s_t_a_r_t___r_o_u_t_i_n_e)) ((vvooiidd **)),, vvooiidd **_a_r_g));;

       Compile and link with _-_p_t_h_r_e_a_d.

DDEESSCCRRIIPPTTIIOONN
       The  pptthhrreeaadd__ccrreeaattee() function starts a new thread in the calling process.  The new thread starts execution by
       invoking _s_t_a_r_t___r_o_u_t_i_n_e(); _a_r_g is passed as the sole argument of _s_t_a_r_t___r_o_u_t_i_n_e().

       The new thread terminates in one of the following ways:

       * It calls pptthhrreeaadd__eexxiitt(3), specifying an exit status value that is available to another thread  in  the  same
         process that calls pptthhrreeaadd__jjooiinn(3).

       * It  returns  from _s_t_a_r_t___r_o_u_t_i_n_e().  This is equivalent to calling pptthhrreeaadd__eexxiitt(3) with the value supplied in
         the _r_e_t_u_r_n statement.

       * It is canceled (see pptthhrreeaadd__ccaanncceell(3)).

       * Any of the threads in the process calls eexxiitt(3), or the main thread performs a  return  from  _m_a_i_n().   This
         causes the termination of all threads in the process.

       The  _a_t_t_r  argument  points  to  a _p_t_h_r_e_a_d___a_t_t_r___t structure whose contents are used at thread creation time to
       determine attributes for the new thread; this structure is initialized using pptthhrreeaadd__aattttrr__iinniitt(3) and  related
       functions.  If _a_t_t_r is NULL, then the thread is created with default attributes.

       Before  returning, a successful call to pptthhrreeaadd__ccrreeaattee() stores the ID of the new thread in the buffer pointed
       to by _t_h_r_e_a_d; this identifier is used to refer to the thread in subsequent calls to other pthreads functions.

       The new thread inherits a copy of the creating thread's signal mask (pptthhrreeaadd__ssiiggmmaasskk(3)).  The set of  pending
       signals  for  the  new thread is empty (ssiiggppeennddiinngg(2)).  The new thread does not inherit the creating thread's
       alternate signal stack (ssiiggaallttssttaacckk(2)).

       The new thread inherits the calling thread's floating-point environment (ffeennvv(3)).

       The initial value of the new thread's CPU-time clock is 0 (see pptthhrreeaadd__ggeettccppuucclloocckkiidd(3)).

   LLiinnuuxx--ssppeecciiffiicc ddeettaaiillss
       The new thread inherits copies of the calling thread's capability sets (see ccaappaabbiilliittiieess(7)) and CPU  affinity
       mask (see sscchheedd__sseettaaffffiinniittyy(2)).

RREETTUURRNN VVAALLUUEE
       On  success, pptthhrreeaadd__ccrreeaattee() returns 0; on error, it returns an error number, and the contents of _*_t_h_r_e_a_d are
       undefined.

EERRRROORRSS
       EEAAGGAAIINN Insufficient resources to create another thread.

       EEAAGGAAIINN A system-imposed limit on the number of threads was encountered.  There are a number of limits that may
              trigger  this error: the RRLLIIMMIITT__NNPPRROOCC soft resource limit (set via sseettrrlliimmiitt(2)), which limits the num‐
              ber of processes and threads for a real user ID, was reached; the kernel's  system-wide  limit  on  the
              number  of processes and threads, _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_t_h_r_e_a_d_s_-_m_a_x, was reached (see pprroocc(5)); or the maxi‐
              mum number of PIDs, _/_p_r_o_c_/_s_y_s_/_k_e_r_n_e_l_/_p_i_d___m_a_x, was reached (see pprroocc(5)).

       EEIINNVVAALL Invalid settings in _a_t_t_r.

       EEPPEERRMM  No permission to set the scheduling policy and parameters specified in _a_t_t_r.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌─────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee        │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├─────────────────┼───────────────┼─────────┤
       │pptthhrreeaadd__ccrreeaattee() │ Thread safety │ MT-Safe │
       └─────────────────┴───────────────┴─────────┘

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008.

NNOOTTEESS
       See pptthhrreeaadd__sseellff(3) for further information on the thread ID returned in _*_t_h_r_e_a_d by pptthhrreeaadd__ccrreeaattee().   Unless
       real-time  scheduling policies are being employed, after a call to pptthhrreeaadd__ccrreeaattee(), it is indeterminate which
       thread—the caller or the new thread—will next execute.

       A thread may either be _j_o_i_n_a_b_l_e or  _d_e_t_a_c_h_e_d.   If  a  thread  is  joinable,  then  another  thread  can  call
       pptthhrreeaadd__jjooiinn(3)  to  wait for the thread to terminate and fetch its exit status.  Only when a terminated join‐
       able thread has been joined are the last of its resources released back to the system.  When a detached thread
       terminates,  its  resources are automatically released back to the system: it is not possible to join with the
       thread in order to obtain its exit status.  Making a thread detached  is  useful  for  some  types  of  daemon
       threads whose exit status the application does not need to care about.  By default, a new thread is created in
       a joinable state, unless _a_t_t_r was set to create the thread in a detached state (using  pptthhrreeaadd__aattttrr__sseettddeettaacchh‐‐
       ssttaattee(3)).

       On Linux/x86-32, the default stack size for a new thread is 2 megabytes.  Under the NPTL threading implementa‐
       tion, if the RRLLIIMMIITT__SSTTAACCKK soft resource limit _a_t _t_h_e _t_i_m_e _t_h_e _p_r_o_g_r_a_m _s_t_a_r_t_e_d has any value other than "unlim‐
       ited",  then  it  determines  the  default stack size of new threads.  Using pptthhrreeaadd__aattttrr__sseettssttaacckkssiizzee(3), the
       stack size attribute can be explicitly set in the _a_t_t_r argument used to create a thread, in order to obtain  a
       stack size other than the default.

BBUUGGSS
       In  the  obsolete  LinuxThreads  implementation,  each of the threads in a process has a different process ID.
       This is in violation of the POSIX threads specification, and is the source of many  other  nonconformances  to
       the standard; see pptthhrreeaaddss(7).

EEXXAAMMPPLLEE
       The  program  below  demonstrates  the  use of pptthhrreeaadd__ccrreeaattee(), as well as a number of other functions in the
       pthreads API.

       In the following run, on a system providing the NPTL threading implementation, the stack size defaults to  the
       value given by the "stack size" resource limit:

           $ uulliimmiitt --ss
           8192            # The stack size limit is 8 MB (0x800000 bytes)
           $ ..//aa..oouutt hhoollaa ssaalluutt sseerrvvuuss
           Thread 1: top of stack near 0xb7dd03b8; argv_string=hola
           Thread 2: top of stack near 0xb75cf3b8; argv_string=salut
           Thread 3: top of stack near 0xb6dce3b8; argv_string=servus
           Joined with thread 1; returned value was HOLA
           Joined with thread 2; returned value was SALUT
           Joined with thread 3; returned value was SERVUS

       In the next run, the program explicitly sets a stack size of 1 MB (using pptthhrreeaadd__aattttrr__sseettssttaacckkssiizzee(3)) for the
       created threads:

           $ ..//aa..oouutt --ss 00xx110000000000 hhoollaa ssaalluutt sseerrvvuuss
           Thread 1: top of stack near 0xb7d723b8; argv_string=hola
           Thread 2: top of stack near 0xb7c713b8; argv_string=salut
           Thread 3: top of stack near 0xb7b703b8; argv_string=servus
           Joined with thread 1; returned value was HOLA
           Joined with thread 2; returned value was SALUT
           Joined with thread 3; returned value was SERVUS

   PPrrooggrraamm ssoouurrccee

       #include <pthread.h>
       #include <string.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>
       #include <errno.h>
       #include <ctype.h>

       #define handle_error_en(en, msg) \
               do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

       #define handle_error(msg) \
               do { perror(msg); exit(EXIT_FAILURE); } while (0)

       struct thread_info {    /* Used as argument to thread_start() */
           pthread_t thread_id;        /* ID returned by pthread_create() */
           int       thread_num;       /* Application-defined thread # */
           char     *argv_string;      /* From command-line argument */
       };

       /* Thread start function: display address near top of our stack,
          and return upper-cased copy of argv_string */

       static void *
       thread_start(void *arg)
       {
           struct thread_info *tinfo = arg;
           char *uargv, *p;

           printf("Thread %d: top of stack near %p; argv_string=%s\n",
                   tinfo->thread_num, &p, tinfo->argv_string);

           uargv = strdup(tinfo->argv_string);
           if (uargv == NULL)
               handle_error("strdup");

           for (p = uargv; *p != '\0'; p++)
               *p = toupper(*p);

           return uargv;
       }

       int
       main(int argc, char *argv[])
       {
           int s, tnum, opt, num_threads;
           struct thread_info *tinfo;
           pthread_attr_t attr;
           int stack_size;
           void *res;

           /* The "-s" option specifies a stack size for our threads */

           stack_size = -1;
           while ((opt = getopt(argc, argv, "s:")) != -1) {
               switch (opt) {
               case 's':
                   stack_size = strtoul(optarg, NULL, 0);
                   break;

               default:
                   fprintf(stderr, "Usage: %s [-s stack-size] arg...\n",
                           argv[0]);
                   exit(EXIT_FAILURE);
               }
           }

           num_threads = argc - optind;

           /* Initialize thread creation attributes */

           s = pthread_attr_init(&attr);
           if (s != 0)
               handle_error_en(s, "pthread_attr_init");

           if (stack_size > 0) {
               s = pthread_attr_setstacksize(&attr, stack_size);
               if (s != 0)
                   handle_error_en(s, "pthread_attr_setstacksize");
           }

           /* Allocate memory for pthread_create() arguments */

           tinfo = calloc(num_threads, sizeof(struct thread_info));
           if (tinfo == NULL)
               handle_error("calloc");

           /* Create one thread for each command-line argument */

           for (tnum = 0; tnum < num_threads; tnum++) {
               tinfo[tnum].thread_num = tnum + 1;
               tinfo[tnum].argv_string = argv[optind + tnum];

               /* The pthread_create() call stores the thread ID into
                  corresponding element of tinfo[] */

               s = pthread_create(&tinfo[tnum].thread_id, &attr,
                                  &thread_start, &tinfo[tnum]);
               if (s != 0)
                   handle_error_en(s, "pthread_create");
           }

           /* Destroy the thread attributes object, since it is no
              longer needed */

           s = pthread_attr_destroy(&attr);
           if (s != 0)
               handle_error_en(s, "pthread_attr_destroy");

           /* Now join with each thread, and display its returned value */

           for (tnum = 0; tnum < num_threads; tnum++) {
               s = pthread_join(tinfo[tnum].thread_id, &res);
               if (s != 0)
                   handle_error_en(s, "pthread_join");

               printf("Joined with thread %d; returned value was %s\n",
                       tinfo[tnum].thread_num, (char *) res);
               free(res);      /* Free memory allocated by thread */
           }

           free(tinfo);
           exit(EXIT_SUCCESS);
       }

SSEEEE AALLSSOO
       ggeettrrlliimmiitt(2), pptthhrreeaadd__aattttrr__iinniitt(3), pptthhrreeaadd__ccaanncceell(3), pptthhrreeaadd__ddeettaacchh(3), pptthhrreeaadd__eeqquuaall(3), pptthhrreeaadd__eexxiitt(3),
       pptthhrreeaadd__ggeettaattttrr__nnpp(3), pptthhrreeaadd__jjooiinn(3), pptthhrreeaadd__sseellff(3), pptthhrreeaadd__sseettaattttrr__ddeeffaauulltt__nnpp(3), pptthhrreeaaddss(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information
       about reporting bugs, and the latest version of this page, can be found at
       https://www.kernel.org/doc/man-pages/.

Linux                                                 2017-09-15                                    PTHREAD_CREATE(3)
